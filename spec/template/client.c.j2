{% extends "base/wrap.c.j2" %}
{% block headers %}
#include <sys/syscall.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
{{ super() }}

{% endblock %}

{% block main %}
{{ super() }}

__GLXextFuncPtr glXGetProcAddressARB(const GLubyte *name) {
    {% for func in functions %}
    if (strcmp(name, "{{ func.name }}") == 0) {
        return (void *){{ func.name }};
    }
    {% endfor %}
    printf("glXGetProcAddress(%s) not found\n", name);
    return NULL;
}

__GLXextFuncPtr glXGetProcAddress(const GLubyte *name) {
    return glXGetProcAddressARB(name);
}
{% endblock %}

{% block definition %}
#ifndef skip_client_{{ func.name }}
{{ super() -}}
#endif
{% endblock %}

{% block call %}
    {{ func.name }}_INDEXED *packed_data = malloc(sizeof({{ func.name }}_INDEXED));
    packed_data->func = {{ func.name }}_INDEX;
    {% for arg in func.args %}
    packed_data->args.a{{ loop.index }} = {{ arg.name }};
    {% endfor %}
    {% if not func.void %}
    {{ func.return }} ret;
    {% else %}
    int ret;
    {% endif %}
    syscall(SYS_proxy, (void *)packed_data, &ret);
    {% if not func.void %}
    return ret;
    {% endif %}
{% endblock %}
