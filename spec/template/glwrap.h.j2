{% extends "base/header.j2" %}
{% block content %}

typedef struct {
    int format;
    void *func;
    void *args;
} UnknownCall;

enum FORMAT {
{% for f in formats %}
    FORMAT_{{ f.types }},
{% endfor %}
};

{% for f in formats %}
typedef {{ f.return }} (*FUNC_{{ f.types }})({{ f.args|args }});
typedef struct {
    {% for arg in f.args %}
    {{ arg.type }} a{{ loop.index }};
    {% endfor %}
} ARGS_{{ f.types }};
typedef struct {
    int format;
    FUNC_{{ f.types }} func;
    ARGS_{{ f.types }} args;
} PACKED_{{ f.types }};
{% endfor %}

extern void glPushCall(void *data);
void glPackedCall(const UnknownCall *packed);

{% for func in functions %}
#define {{ func.name }}_RETURN {{ func.return }}
#define {{ func.name }}_ARG_NAMES {{ func.args|args(0) }}
#define {{ func.name }}_ARG_EXPAND {{ func.args|args }}
#define {{ func.name }}_PACKED PACKED_{{ func.types }}
#define {{ func.name }}_FORMAT FORMAT_{{ func.types }}
{% endfor %}

{% for func in functions %}
{{ func.return }} {{ func.name }}({{ func.name }}_ARG_EXPAND);
typedef {{ func.return }} (*glesptr_{{ func.name }})({{ func.name }}_ARG_EXPAND);
{% endfor %}

{% for func in functions %}
#ifndef direct_{{ func.name }}
static inline void push_{{ func.name }}({{ func.name }}_ARG_EXPAND) {
    {{ func.name }}_PACKED *packed_data = malloc(sizeof({{ func.name }}_PACKED));
    packed_data->format = {{ func.name }}_FORMAT;
    packed_data->func = {{ func.name }};
    {% for arg in func.args %}
    packed_data->args.a{{ loop.index }} = {{ arg.name }};
    {% endfor %}
    glPushCall((void *)packed_data);
}
#endif
{% endfor %}

{% endblock %}
