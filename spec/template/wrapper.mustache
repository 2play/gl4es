{{#headers}}
#include "{{.}}"
{{/headers}}

void glPackedCall(const UnknownCall *packed) {
    switch (packed->format) {
        {{#formats}}
        case FORMAT_{{types}}: {
            PACKED_{{types}} *unpacked = (PACKED_{{types}} *)packed;
            ARGS_{{types}} args = unpacked->args;
            unpacked->func({{#args}}args.a{{index}}{{^last}}, {{/last}}{{/args}});
            break;
        }
        {{/formats}}
        default:
            printf("fell through :(\n");
            break;
    }
}

{{#functions}}
#ifndef skip_{{name}}
{{return}} {{name}}({{#args}}{{type}} {{name}}{{^last}}, {{/last}}{{/args}}) {
    LOAD_GLES({{return}}, {{name}}{{#args}}{{#first}}, {{/first}}{{type}} {{name}}{{^last}}, {{/last}}{{/args}});
#ifndef direct_{{name}}
    if (state.list.compiling) {
        PACKED_{{types}} *data = malloc(sizeof(PACKED_{{types}}));
        data->format = FORMAT_{{types}};
        data->func = {{name}};
        {{#args}}
        data->args.a{{index}} = {{name}};
        {{/args}}
        glPushCall((void *)data);
{{^void}}
        return 0;
{{/void}}
    } else {
#endif
    {{^void}}return {{/void}}gles_{{name}}({{#args}}{{name}}{{^last}}, {{/last}}{{/args}});
#ifndef direct_{{name}}
    }
#endif
}
#endif

{{/functions}}
